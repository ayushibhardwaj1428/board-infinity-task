{"ast":null,"code":"var _jsxFileName = \"G:\\\\boardinfinity-task\\\\board-infinity-task\\\\src\\\\router\\\\AppRouter.js\";\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from '../components/Home';\nimport RedirectPage from '../components/RedirectPage';\nimport Dashboard from '../components/Dashboard';\nimport NotFoundPage from '../components/NotFoundPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AppRouter extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      expiryTime: '0'\n    };\n\n    this.setExpiryTime = expiryTime => {\n      this.setState({\n        expiryTime\n      });\n    };\n\n    this.isValidSession = () => {\n      const currentTime = new Date().getTime();\n      const expiryTime = this.state.expiryTime;\n      const isSessionValid = currentTime < expiryTime;\n      return isSessionValid;\n    };\n  }\n\n  componentDidMount() {\n    let expiryTime;\n\n    try {\n      expiryTime = JSON.parse(localStorage.getItem('expiry_time'));\n    } catch (error) {\n      expiryTime = '0';\n    }\n\n    this.setState({\n      expiryTime\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            exact: true,\n            render: props => /*#__PURE__*/_jsxDEV(Home, {\n              isValidSession: this.isValidSession,\n              ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/redirect\",\n            render: props => /*#__PURE__*/_jsxDEV(RedirectPage, {\n              isValidSession: this.isValidSession,\n              setExpiryTime: this.setExpiryTime,\n              ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/dashboard\",\n            render: props => /*#__PURE__*/_jsxDEV(Dashboard, {\n              isValidSession: this.isValidSession,\n              ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            component: NotFoundPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AppRouter;","map":{"version":3,"sources":["G:/boardinfinity-task/board-infinity-task/src/router/AppRouter.js"],"names":["React","BrowserRouter","Route","Switch","Home","RedirectPage","Dashboard","NotFoundPage","AppRouter","Component","state","expiryTime","setExpiryTime","setState","isValidSession","currentTime","Date","getTime","isSessionValid","componentDidMount","JSON","parse","localStorage","getItem","error","render","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;;AAEA,MAAMC,SAAN,SAAwBR,KAAK,CAACS,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AACNC,MAAAA,UAAU,EAAE;AADN,KAD8B;;AAAA,SAetCC,aAfsC,GAerBD,UAAD,IAAgB;AAC9B,WAAKE,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACD,KAjBqC;;AAAA,SAmBtCG,cAnBsC,GAmBrB,MAAM;AACrB,YAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,YAAMN,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAA9B;AACA,YAAMO,cAAc,GAAGH,WAAW,GAAGJ,UAArC;AAEA,aAAOO,cAAP;AACD,KAzBqC;AAAA;;AAKtCC,EAAAA,iBAAiB,GAAG;AAClB,QAAIR,UAAJ;;AACA,QAAI;AACFA,MAAAA,UAAU,GAAGS,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAb;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdb,MAAAA,UAAU,GAAG,GAAb;AACD;;AACD,SAAKE,QAAL,CAAc;AAAEF,MAAAA;AAAF,KAAd;AACD;;AAcDc,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,aAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE,QAAC,MAAD;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,GADP;AAEE,YAAA,KAAK,EAAE,IAFT;AAGE,YAAA,MAAM,EAAGC,KAAD,iBACN,QAAC,IAAD;AAAM,cAAA,cAAc,EAAE,KAAKZ,cAA3B;AAAA,iBAA+CY;AAA/C;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,WADP;AAEE,YAAA,MAAM,EAAGA,KAAD,iBACN,QAAC,YAAD;AACE,cAAA,cAAc,EAAE,KAAKZ,cADvB;AAEE,cAAA,aAAa,EAAE,KAAKF,aAFtB;AAAA,iBAGMc;AAHN;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,kBARF,eAkBE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,YADP;AAEE,YAAA,MAAM,EAAGA,KAAD,iBACN,QAAC,SAAD;AAAW,cAAA,cAAc,EAAE,KAAKZ,cAAhC;AAAA,iBAAoDY;AAApD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,kBAlBF,eAwBE,QAAC,KAAD;AAAO,YAAA,SAAS,EAAEnB;AAAlB;AAAA;AAAA;AAAA;AAAA,kBAxBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD;;AA5DqC;;AA+DxC,eAAeC,SAAf","sourcesContent":["import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from '../components/Home';\nimport RedirectPage from '../components/RedirectPage';\nimport Dashboard from '../components/Dashboard';\nimport NotFoundPage from '../components/NotFoundPage';\n\nclass AppRouter extends React.Component {\n  state = {\n    expiryTime: '0'\n  };\n\n  componentDidMount() {\n    let expiryTime;\n    try {\n      expiryTime = JSON.parse(localStorage.getItem('expiry_time'));\n    } catch (error) {\n      expiryTime = '0';\n    }\n    this.setState({ expiryTime });\n  }\n\n  setExpiryTime = (expiryTime) => {\n    this.setState({ expiryTime });\n  };\n\n  isValidSession = () => {\n    const currentTime = new Date().getTime();\n    const expiryTime = this.state.expiryTime;\n    const isSessionValid = currentTime < expiryTime;\n\n    return isSessionValid;\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"main\">\n          <Switch>\n            <Route\n              path=\"/\"\n              exact={true}\n              render={(props) => (\n                <Home isValidSession={this.isValidSession} {...props} />\n              )}\n            />\n            <Route\n              path=\"/redirect\"\n              render={(props) => (\n                <RedirectPage\n                  isValidSession={this.isValidSession}\n                  setExpiryTime={this.setExpiryTime}\n                  {...props}\n                />\n              )}\n            />\n            <Route\n              path=\"/dashboard\"\n              render={(props) => (\n                <Dashboard isValidSession={this.isValidSession} {...props} />\n              )}\n            />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default AppRouter;\n"]},"metadata":{},"sourceType":"module"}