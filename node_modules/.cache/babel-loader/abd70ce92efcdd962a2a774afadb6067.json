{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\Desktop\\\\folder\\\\music\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { initiateGetResult, initiateLoadMoreAlbums, initiateLoadMorePlaylist, initiateLoadMoreArtists } from '../actions/result';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport SearchResult from './SearchResult';\nimport SearchForm from './SearchForm';\nimport Header from './Header';\nimport Loader from './Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('albums');\n  const {\n    isValidSession,\n    history\n  } = props;\n\n  const handleSearch = searchTerm => {\n    if (isValidSession()) {\n      setIsLoading(true);\n      props.dispatch(initiateGetResult(searchTerm)).then(() => {\n        setIsLoading(false);\n        setSelectedCategory('albums');\n      });\n    } else {\n      history.push({\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      });\n    }\n  };\n\n  const loadMore = async type => {\n    if (isValidSession()) {\n      const {\n        dispatch,\n        albums,\n        artists,\n        playlist\n      } = props;\n      setIsLoading(true);\n\n      switch (type) {\n        case 'albums':\n          await dispatch(initiateLoadMoreAlbums(albums.next));\n          break;\n\n        case 'artists':\n          await dispatch(initiateLoadMoreArtists(artists.next));\n          break;\n\n        case 'playlist':\n          await dispatch(initiateLoadMorePlaylist(playlist.next));\n          break;\n\n        default:\n      }\n\n      setIsLoading(false);\n    } else {\n      history.push({\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      });\n    }\n  };\n\n  const setCategory = category => {\n    setSelectedCategory(category);\n  };\n\n  const {\n    albums,\n    artists,\n    playlist\n  } = props;\n  const result = {\n    albums,\n    artists,\n    playlist\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: isValidSession() ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n        handleSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Loader, {\n        show: isLoading,\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SearchResult, {\n        result: result,\n        loadMore: loadMore,\n        setCategory: setCategory,\n        selectedCategory: selectedCategory,\n        isValidSession: isValidSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"SMjZXYIvygyuw6mOjey8On4Ec0I=\");\n\n_c = Dashboard;\n\nconst mapStateToProps = state => {\n  return {\n    albums: state.albums,\n    artists: state.artists,\n    playlist: state.playlist\n  };\n};\n\nexport default connect(mapStateToProps)(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/sahil/Desktop/folder/music/src/components/Dashboard.js"],"names":["React","useState","initiateGetResult","initiateLoadMoreAlbums","initiateLoadMorePlaylist","initiateLoadMoreArtists","connect","Redirect","SearchResult","SearchForm","Header","Loader","Dashboard","props","isLoading","setIsLoading","selectedCategory","setSelectedCategory","isValidSession","history","handleSearch","searchTerm","dispatch","then","push","pathname","state","session_expired","loadMore","type","albums","artists","playlist","next","setCategory","category","result","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport {\n  initiateGetResult,\n  initiateLoadMoreAlbums,\n  initiateLoadMorePlaylist,\n  initiateLoadMoreArtists\n} from '../actions/result';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport SearchResult from './SearchResult';\nimport SearchForm from './SearchForm';\nimport Header from './Header';\nimport Loader from './Loader';\n\nconst Dashboard = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState('albums');\n  const { isValidSession, history } = props;\n\n  const handleSearch = (searchTerm) => {\n    if (isValidSession()) {\n      setIsLoading(true);\n      props.dispatch(initiateGetResult(searchTerm)).then(() => {\n        setIsLoading(false);\n        setSelectedCategory('albums');\n      });\n    } else {\n      history.push({\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      });\n    }\n  };\n\n  const loadMore = async (type) => {\n    if (isValidSession()) {\n      const { dispatch, albums, artists, playlist } = props;\n      setIsLoading(true);\n      switch (type) {\n        case 'albums':\n          await dispatch(initiateLoadMoreAlbums(albums.next));\n          break;\n        case 'artists':\n          await dispatch(initiateLoadMoreArtists(artists.next));\n          break;\n        case 'playlist':\n          await dispatch(initiateLoadMorePlaylist(playlist.next));\n          break;\n        default:\n      }\n      setIsLoading(false);\n    } else {\n      history.push({\n        pathname: '/',\n        state: {\n          session_expired: true\n        }\n      });\n    }\n  };\n\n  const setCategory = (category) => {\n    setSelectedCategory(category);\n  };\n\n  const { albums, artists, playlist } = props;\n  const result = { albums, artists, playlist };\n\n  return (\n    <React.Fragment>\n      {isValidSession() ? (\n        <div>\n          <Header />\n          <SearchForm handleSearch={handleSearch} />\n          <Loader show={isLoading}>Loading...</Loader>\n          <SearchResult\n            result={result}\n            loadMore={loadMore}\n            setCategory={setCategory}\n            selectedCategory={selectedCategory}\n            isValidSession={isValidSession}\n          />\n        </div>\n      ) : (\n        <Redirect\n          to={{\n            pathname: '/',\n            state: {\n              session_expired: true\n            }\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    albums: state.albums,\n    artists: state.artists,\n    playlist: state.playlist\n  };\n};\n\nexport default connect(mapStateToProps)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}